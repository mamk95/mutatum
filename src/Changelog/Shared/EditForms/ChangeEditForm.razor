@using Changelog.Data

<EditForm EditContext="@EditContext">
    <div class="mb-3">
        <label for="title" class="form-label">Title</label>

        <InputText id="title" @bind-Value="change.Title" class="form-control" />
    </div>

    <div class="mb-3">
        <label for="type" class="form-label">Type</label>

        <InputSelect id="type" @bind-Value="change.CategoryId" class="form-control">
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="markdown" class="form-label">Description (markdown)</label>

        <InputTextArea id="markdown" @bind-Value="change.Markdown" class="form-control" />
    </div>

    <DataAnnotationsValidator />

    <ValidationSummary />
</EditForm>

@code {
    [Inject] IJSRuntime JSRuntime { get; set; }

    [Parameter]
    public Change change { get; set; }

    [Parameter]
    public EventCallback<Change> changeChanged { get; set; }

    [Parameter]
    public IList<Category> categories { get; set; }

    private EditContext EditContext;

    protected override void OnInitialized()
    {
        EditContext = new EditContext(change);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Coverts the description <textarea> into a markdown editor
            await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/easymde.2.15.0.min.js").AsTask();
            await JSRuntime.InvokeVoidAsync("textareaIdToMarkdownEditor", "markdown");
        }
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName == nameof(change.CategoryId))
        {
            change.Category = categories.First(ct => ct.Id == change.CategoryId);
        }

        changeChanged.InvokeAsync(change);
    }
}
