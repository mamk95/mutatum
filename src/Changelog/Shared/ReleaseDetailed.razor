@using Changelog.Data

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
@inject ReleaseService _releaseService

<div class="release-item mt-3" style="border-left: 5px solid #dadada; padding: 12px; padding-bottom: 1px;">
    <div style="margin-bottom: 8px; border-bottom: 1px solid #dadada; display: flex; justify-content: space-between; align-items: center;">
        <h3 class="release-title d-inline">
            @($"{release.VersionAndTitle}")
        </h3>

        <div class="d-inline">
            <span class="release-date" style="font-size: 12px;">@release.ReleaseDate</span>

            @if (showAdminButtons)
            {
                <AuthorizeView>
                    <Authorized>
                        <a aria-label="Edit" class="mx-2" href="@($"/admin/release/{@release.Id}")">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </a>

                        <a role="button" aria-label="Delete" @onclick="() => { releaseToDelete = release; deleteModal.Open(); }">
                            <span class="oi oi-trash" aria-hidden="true"></span>
                        </a>
                    </Authorized>
                </AuthorizeView>
            }
        </div>
    </div>

    <div class="release-longdesc mb-3">
        <MarkdownDisplay markdown="@release.LongDescriptionMarkdown" />
    </div>

    @if (release.Changes == null || release.Changes.Count < 1)
    {
        <div style="margin-top: 8px;">No changes for this release</div>
    }

    @foreach (var change in release.Changes)
    {
        <div style="margin-bottom: 16px;">
            <ChangeDetailed change="@change" />
        </div>
    }
</div>

<Modal @ref="deleteModal">
    <Title>Delete release?</Title>
    <Body>
        <p>
            Do you want to delete the selected release?
            <br />
            <b>ID:</b> @releaseToDelete?.Id
            <br />
            <b>Name:</b> @releaseToDelete?.Title
        </p>
    </Body>
    <Footer>
        <button type="button" class="btn btn-danger" @onclick="() => DeleteRelease(releaseToDelete.Id)">Delete</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => deleteModal.Close()">Cancel</button>
    </Footer>
</Modal>

@code {
    [Parameter]
    public Release release { get; set; }

    [Parameter]
    public bool showAdminButtons { get; set; } = false;

    private Modal deleteModal { get; set; }

    private Release releaseToDelete { get; set; }

    private async Task DeleteRelease(int id)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            await JsRuntime.InvokeVoidAsync("alert", "You do not have permission to delete this release!");
            return;
        }

        _releaseService.DeleteReleaseById(id);
        NavigationManager.NavigateTo(NavigationManager.Uri, true); // Reload page to update list
    }
    }
